(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
  typeof define === 'function' && define.amd ? define(factory) :
  (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (global.index = global.index || {}, global.index.js = factory()));
})(this, (function () { 'use strict';

  const supports = typeof Symbol === "function" && Symbol.for;
  const REACT_ELEMEANATA_SYMBOL = supports
      ? Symbol.for("react.element")
      : "0UUIO";

  const ReactElement = function (type, key, ref, props) {
      const element = {
          $$typeof: REACT_ELEMEANATA_SYMBOL,
          type,
          key,
          ref,
          props,
          __mark: "haiqiong",
      };
      return element;
  };
  const jsx = (type, config, ...maybeChildren) => {
      let key = null;
      let ref = null;
      const props = {};
      for (const prop in config) {
          const val = config[prop];
          if (prop === "key") {
              if (val !== undefined) {
                  key = "" + val;
              }
              continue;
          }
          if (prop === "ref") {
              if (val !== undefined) {
                  ref = val;
              }
              continue;
          }
          if ({}.hasOwnProperty.call(config, prop)) {
              props[prop] = val;
          }
      }
      const maybeChildrenLength = maybeChildren.length;
      if (maybeChildrenLength) {
          if (maybeChildrenLength === 1) {
              props.children = maybeChildren[0];
          }
          else {
              props.children = maybeChildren;
          }
      }
      return ReactElement(type, key, ref, props);
  };

  var index = {
      version: "0.0.0",
      createElement: jsx,
  };

  return index;

}));
